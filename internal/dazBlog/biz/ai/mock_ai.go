// Copyright 2023 daz-3ux(杨鹏达) <daz-3ux@proton.me>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/Daz-3ux/dBlog.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Daz-3ux/dBlog/internal/dazBlog/biz/ai (interfaces: AIBiz)

// Package ai is a generated GoMock package.
package ai

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"

	v1 "github.com/Daz-3ux/dBlog/pkg/api/dazBlog/v1"
)

// MockAIBiz is a mock of AIBiz interface.
type MockAIBiz struct {
	ctrl     *gomock.Controller
	recorder *MockAIBizMockRecorder
}

// MockAIBizMockRecorder is the mock recorder for MockAIBiz.
type MockAIBizMockRecorder struct {
	mock *MockAIBiz
}

// NewMockAIBiz creates a new mock instance.
func NewMockAIBiz(ctrl *gomock.Controller) *MockAIBiz {
	mock := &MockAIBiz{ctrl: ctrl}
	mock.recorder = &MockAIBizMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAIBiz) EXPECT() *MockAIBizMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAIBiz) Create(arg0 context.Context, arg1 *v1.CreateAIRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAIBizMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAIBiz)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockAIBiz) Delete(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAIBizMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAIBiz)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockAIBiz) Get(arg0 context.Context, arg1, arg2 string) (*v1.GetAIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1.GetAIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAIBizMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAIBiz)(nil).Get), arg0, arg1, arg2)
}

// List mocks base method.
func (m *MockAIBiz) List(arg0 context.Context, arg1 string, arg2, arg3 int) (*v1.ListAIResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*v1.ListAIResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAIBizMockRecorder) List(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAIBiz)(nil).List), arg0, arg1, arg2, arg3)
}

// Update mocks base method.
func (m *MockAIBiz) Update(arg0 context.Context, arg1 *v1.UpdateAIRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAIBizMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAIBiz)(nil).Update), arg0, arg1)
}
